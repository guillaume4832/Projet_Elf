<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="elfrelocate_symb_8c" kind="file" language="C++">
    <compoundname>elfrelocateSymb.c</compoundname>
    <includes refid="elfrelocate_symb_8h" local="yes">elfrelocateSymb.h</includes>
    <incdepgraph>
      <node id="53">
        <label>C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c</label>
        <link refid="elfrelocateSymb.c"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>elfrelocateSymb.h</label>
        <link refid="elfrelocate_symb_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>stdint.h</label>
      </node>
      <node id="56">
        <label>stdlib.h</label>
      </node>
      <node id="57">
        <label>elf.h</label>
      </node>
      <node id="58">
        <label>string.h</label>
      </node>
      <node id="59">
        <label>filereader.h</label>
        <link refid="filereader_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="elfrelocate_symb_8c_1a95c086ff84293bf6ab39ec50d9fbbe28" prot="public" static="no">
        <name>ELF_RELOC_ERR</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" line="2" column="11" bodyfile="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" bodystart="2" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="elfrelocate_symb_8c_1a093fa5ee40068f146bfcae5945721d27" prot="public" static="no">
        <name>DO_ARM_ABS32</name>
        <param><defname>S</defname></param>
        <param><defname>A</defname></param>
        <param><defname>T</defname></param>
        <initializer>(S + A) | T</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" line="3" column="10" bodyfile="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="elfrelocate_symb_8c_1a35d51558d1302b132fc93034c0d286c4" prot="public" static="no">
        <name>DO_ARM_ABS16</name>
        <param><defname>S</defname></param>
        <param><defname>A</defname></param>
        <initializer>(S + A)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" line="4" column="10" bodyfile="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="elfrelocate_symb_8c_1a415ed3dcdc9f1505bed8a4c6cec39c3c" prot="public" static="no">
        <name>DO_ARM_ABS12</name>
        <param><defname>S</defname></param>
        <param><defname>A</defname></param>
        <initializer>(S + A)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" line="5" column="10" bodyfile="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="elfrelocate_symb_8c_1afd7406e647c9250f553d4c35710fcf40" prot="public" static="no">
        <name>DO_ARM_ABS8</name>
        <param><defname>S</defname></param>
        <param><defname>A</defname></param>
        <initializer>(S + A)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" line="6" column="10" bodyfile="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="elfrelocate_symb_8c_1ad9fed6122676b50a862faeaaedd278d3" prot="public" static="no">
        <name>DO_ARM_CALL</name>
        <param><defname>S</defname></param>
        <param><defname>A</defname></param>
        <param><defname>T</defname></param>
        <param><defname>P</defname></param>
        <initializer>((S + A) | T) - P</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" line="7" column="10" bodyfile="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="elfrelocate_symb_8c_1a90b5641f897358c64e8fa24d1e54da1b" prot="public" static="no">
        <name>DO_ARM_JUMP24</name>
        <param><defname>S</defname></param>
        <param><defname>A</defname></param>
        <param><defname>T</defname></param>
        <param><defname>P</defname></param>
        <initializer>((S + A) | T) - P</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" line="8" column="10" bodyfile="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="elfrelocate_symb_8c_1a37926c215984c523107a93ea4ff42c0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* elfrelocatesymb</definition>
        <argsstring>(char *filePath, Elf32_Ehdr header, Elf32_Ehdr headerNew, Elf32_Rel **rel, Elf32_Shdr *shdr, Elf32_Shdr *shdrNew, Elf32_Sym *symOLD, Elf32_Sym *sym)</argsstring>
        <name>elfrelocatesymb</name>
        <param>
          <type>char *</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>Elf32_Ehdr</type>
          <declname>header</declname>
        </param>
        <param>
          <type>Elf32_Ehdr</type>
          <declname>headerNew</declname>
        </param>
        <param>
          <type>Elf32_Rel **</type>
          <declname>rel</declname>
        </param>
        <param>
          <type>Elf32_Shdr *</type>
          <declname>shdr</declname>
        </param>
        <param>
          <type>Elf32_Shdr *</type>
          <declname>shdrNew</declname>
        </param>
        <param>
          <type>Elf32_Sym *</type>
          <declname>symOLD</declname>
        </param>
        <param>
          <type>Elf32_Sym *</type>
          <declname>sym</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" line="10" column="1" bodyfile="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c" bodystart="10" bodyend="213"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="elfrelocate_symb_8h" kindref="compound">elfrelocateSymb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2" refid="elfrelocate_symb_8c_1a95c086ff84293bf6ab39ec50d9fbbe28" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ELF_RELOC_ERR<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="elfrelocate_symb_8c_1a093fa5ee40068f146bfcae5945721d27" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DO_ARM_ABS32(S,<sp/>A,<sp/>T)<sp/><sp/>(S<sp/>+<sp/>A)<sp/>|<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="elfrelocate_symb_8c_1a35d51558d1302b132fc93034c0d286c4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DO_ARM_ABS16(S,<sp/>A)<sp/>(S<sp/>+<sp/>A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="elfrelocate_symb_8c_1a415ed3dcdc9f1505bed8a4c6cec39c3c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DO_ARM_ABS12(S,<sp/>A)<sp/>(S<sp/>+<sp/>A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="elfrelocate_symb_8c_1afd7406e647c9250f553d4c35710fcf40" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DO_ARM_ABS8(S,<sp/>A)<sp/><sp/>(S<sp/>+<sp/>A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="elfrelocate_symb_8c_1ad9fed6122676b50a862faeaaedd278d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DO_ARM_CALL(S,<sp/>A,<sp/>T,<sp/>P)<sp/><sp/><sp/><sp/>((S<sp/>+<sp/>A)<sp/>|<sp/>T)<sp/>-<sp/>P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="elfrelocate_symb_8c_1a90b5641f897358c64e8fa24d1e54da1b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DO_ARM_JUMP24(S,<sp/>A,<sp/>T,<sp/>P)<sp/><sp/>((S<sp/>+<sp/>A)<sp/>|<sp/>T)<sp/>-<sp/>P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="elfrelocate_symb_8h_1a37926c215984c523107a93ea4ff42c0a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="elfrelocate_symb_8c_1a37926c215984c523107a93ea4ff42c0a" kindref="member">elfrelocatesymb</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>filePath,<sp/>Elf32_Ehdr<sp/>header,Elf32_Ehdr<sp/>headerNew,<sp/>Elf32_Rel<sp/>**rel,<sp/>Elf32_Shdr<sp/>*shdr,Elf32_Shdr<sp/>*shdrNew,<sp/>Elf32_Sym<sp/>*symOLD,<sp/>Elf32_Sym<sp/>*sym)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileBytes<sp/>=<sp/><ref refid="filereader_8c_1a7e953090d868ee919a6d2fae4b0de1c2" kindref="member">readFileBytes</ref>(filePath);<sp/></highlight><highlight class="comment">//<sp/>Contenu<sp/>du<sp/>fichier<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compteur<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symndx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k,T,first,second,third,fourth,sum,<sp/>ref,<sp/>addresse,<sp/>symtabTaille,temp;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isBigEndian<sp/>=<sp/>header.e_ident[EI_DATA]-1;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newval;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>poidsFort,<sp/>poidsFaible,poidsFort2,<sp/>poidsFaible2,poidsMoyen1,poidsMoyen2;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=0;k&lt;header.e_shnum;k++)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shdr[k].sh_type<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symtabTaille<sp/>=<sp/>shdr[k].sh_info;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;header.e_shnum;i++)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shdr[i].sh_type<sp/>==<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shdr[i].sh_entsize<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;(shdr[i].sh_size/shdr[i].sh_entsize);j++)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*ref<sp/>=<sp/>shdr[i].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ELF32_R_SYM(rel[compteur][j].r_info)<sp/>!=<sp/>SHN_UNDEF)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symval<sp/>=<sp/>sym[ELF32_R_SYM(rel[compteur][j].r_info)+1].st_value;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symndx<sp/>=<sp/>sym[ELF32_R_SYM(rel[compteur][j].r_info)+1].st_shndx;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(symval<sp/>==<sp/><ref refid="elfrelocate_symb_8c_1a95c086ff84293bf6ab39ec50d9fbbe28" kindref="member">ELF_RELOC_ERR</ref>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Erreur\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ELF32_R_TYPE(rel[compteur][j].r_info))<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R_ARM_NONE:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pas<sp/>de<sp/>réimplantation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R_ARM_ABS32:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+1];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>third<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+2];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourth<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+3];</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isBigEndian<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first<sp/>+<sp/>second<sp/>*16*16<sp/>+<sp/>third<sp/>*16*16*16*16<sp/>+<sp/>fourth<sp/>*16*16*16*16*16*16;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first<sp/>*16*16*16*16*16*16<sp/>+<sp/>second<sp/>*<sp/>16*16*16*16<sp/>+<sp/>third*16*16<sp/>+<sp/>fourth;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/><ref refid="elfrelocate_symb_8c_1a093fa5ee40068f146bfcae5945721d27" kindref="member">DO_ARM_ABS32</ref>(symval,sum,T);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R_ARM_ABS16:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+1];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isBigEndian<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first<sp/>+<sp/>second<sp/>*16*16;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first<sp/>*16*16*16*16*16*16<sp/>+<sp/>second<sp/>*<sp/>16*16*16*16;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/><ref refid="elfrelocate_symb_8c_1a35d51558d1302b132fc93034c0d286c4" kindref="member">DO_ARM_ABS16</ref>(symval,sum);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*case<sp/>R_ARM_ABS12:</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/>DO_ARM_ABS12(symval,<sp/>shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset);</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/>ABS(newval)<sp/>&amp;<sp/>0xFFF;</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R_ARM_ABS8:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isBigEndian<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first<sp/>*16*16*16*16*16*16;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/><ref refid="elfrelocate_symb_8c_1afd7406e647c9250f553d4c35710fcf40" kindref="member">DO_ARM_ABS8</ref>(symval,sum);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R_ARM_JUMP24:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ELF32_ST_TYPE(sym[ELF32_R_SYM(rel[compteur][j].r_info)+1].st_info)<sp/>==<sp/>STT_FUNC)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T=1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T=0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+1];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>third<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+2];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourth<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+3];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isBigEndian<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first<sp/>+<sp/>second<sp/>*16*16<sp/>+<sp/>third<sp/>*16*16*16*16<sp/>+<sp/>fourth<sp/>*16*16*16*16*16*16;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first<sp/>*16*16*16*16*16*16<sp/>+<sp/>second<sp/>*<sp/>16*16*16*16<sp/>+<sp/>third*16*16<sp/>+<sp/>fourth;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp=sum<sp/>&amp;<sp/>0xFF000000;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(sum<sp/>&amp;<sp/>0x00FFFFFF)<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/><ref refid="elfrelocate_symb_8c_1a90b5641f897358c64e8fa24d1e54da1b" kindref="member">DO_ARM_JUMP24</ref>(symval,sum,T,shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/>(newval<sp/>&amp;<sp/>0x03FFFFFE)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/>(newval<sp/>&amp;<sp/>0x00FFFFFF)<sp/>|<sp/>temp;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R_ARM_CALL:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ELF32_ST_TYPE(sym[ELF32_R_SYM(rel[compteur][j].r_info)+1].st_info)<sp/>==<sp/>STT_FUNC)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T=1;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T=0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+1];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>third<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+2];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourth<sp/>=<sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+3];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isBigEndian<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first<sp/>+<sp/>second<sp/>*16*16<sp/>+<sp/>third<sp/>*16*16*16*16<sp/>+<sp/>fourth<sp/>*16*16*16*16*16*16;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>first<sp/>*16*16*16*16*16*16<sp/>+<sp/>second<sp/>*<sp/>16*16*16*16<sp/>+<sp/>third*16*16<sp/>+<sp/>fourth;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp=sum<sp/>&amp;<sp/>0xFF000000;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>(sum<sp/>&amp;<sp/>0x00FFFFFF)<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/><ref refid="elfrelocate_symb_8c_1ad9fed6122676b50a862faeaaedd278d3" kindref="member">DO_ARM_CALL</ref>(symval,sum,T,shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/>(newval<sp/>&amp;<sp/>0x03FFFFFE)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/>=<sp/>(newval<sp/>&amp;<sp/>0x00FFFFFF)<sp/>|<sp/>temp;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Type<sp/>de<sp/>réimplantation<sp/>non<sp/>supportée<sp/>(%d).\n&quot;</highlight><highlight class="normal">,<sp/>ELF32_R_TYPE(rel[compteur][j].r_info));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="filereader_8c_1ade57166b3b24f4707ab6724ab0451055" kindref="member">is_big_endian</ref>)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poidsFort<sp/>=<sp/>(newval<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poidsFaible<sp/>=<sp/>(newval<sp/>&lt;&lt;<sp/>24)<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poidsMoyen1<sp/>=<sp/>(newval<sp/>&lt;&lt;<sp/>8)<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poidsMoyen2<sp/>=<sp/>(newval<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poidsFort<sp/>=<sp/>(newval<sp/>&lt;&lt;<sp/>24)<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poidsFaible<sp/>=<sp/>newval<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poidsMoyen1<sp/>=<sp/>(newval<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poidsMoyen2<sp/>=<sp/>(newval<sp/>&lt;&lt;<sp/>8)<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isBigEndian)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset]<sp/>=<sp/>poidsFort;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+1]<sp/>=<sp/>poidsMoyen1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+2]<sp/>=<sp/>poidsMoyen2;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+3]<sp/>=<sp/>poidsFaible;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset]<sp/>=<sp/>poidsFaible;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+1]<sp/>=<sp/>poidsMoyen2;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+2]<sp/>=<sp/>poidsMoyen1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileBytes[shdr[symndx].sh_offset<sp/>+<sp/>rel[compteur][j].r_offset+3]<sp/>=<sp/>poidsFort;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compteur++;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indice;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indice2=0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size=-1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max=1;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>taille=-1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(indice=0;indice&lt;headerNew.e_shnum;indice++)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shdrNew[indice].sh_offset&gt;max){</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>shdrNew[indice].sh_offset;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taille<sp/>=<sp/>shdrNew[indice].sh_size;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>max<sp/>+<sp/>taille;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chemin<sp/>=<sp/>filePath;<sp/></highlight><highlight class="comment">//<sp/>Récupération<sp/>du<sp/>chemin<sp/>du<sp/>fichier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>chemin[strlen(chemin)-2]=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Suppression<sp/>de<sp/>la<sp/>partie<sp/>&quot;.o&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(chemin,<sp/></highlight><highlight class="stringliteral">&quot;_RELOC_SYMB.o&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Ajout<sp/>au<sp/>nom<sp/>de<sp/>fichier<sp/>&quot;_DELREL.o&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>file_to_write<sp/>=<sp/>fopen(chemin,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_to_write<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(indice2;indice2&lt;size;indice2++){</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(&amp;fileBytes[indice2],<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(fileBytes[indice2]),<sp/>file_to_write);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file_to_write);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chemin;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Guillaume/Documents/GitHub/Projet_Elf/elfrelocateSymb.c"/>
  </compounddef>
</doxygen>
